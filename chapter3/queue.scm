(define (front-ptr queue) (car queue))

(define (rear-ptr queue) (cdr queue))

(define (set-front-ptr! queue item) (set-car! queue item))

(define (set-rear-ptr! queue item) (set-cdr! queue item))

(define (empty-queue? queue) (null? (front-ptr queue)))

(define (make-queue) (cons '() '()))

(define (front-queue queue)
  (if (empty-queue? queue)
    (error "FRONT called with an empty queue" queue)
    (car (front-ptr queue))))

(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))

(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))

; (define (make-queue)
;   (let ((front-ptr '())
;         (rear-ptr '()))
;     (define (set-front-ptr! item) (set! front-ptr item))
;     (define (set-rear-ptr! item) (set! rear-ptr item))
;     (define (empty-queue?) (null? front-ptr))
;     (define (front-queue)
;       (if (empty-queue?)
;         (error "FRONT called with an empty queue")
;         (car front-ptr)))
;     (define (insert-queue! item)
;       (let ((new-pair (cons item '())))
;         (cond ((empty-queue?)
;                (set-front-ptr! new-pair)
;                (set-rear-ptr! new-pair))
;               (else
;                (set-cdr! rear-ptr new-pair)
;                (set-rear-ptr! new-pair)))))
;     (define (delete-queue!)
;       (cond ((empty-queue?)
;              (error "DELETE! called with an empty queue"))
;             (else
;              (set-front-ptr! (cdr front-ptr)))))
;     (define (dispatch m)
;       (cond ((eq? m 'empty-queue?) empty-queue?)
;             ((eq? m 'front-queue) front-queue)
;             ((eq? m 'insert-queue!) insert-queue!)
;             ((eq? m 'delete-queue!) delete-queue!)
;             (else (error "Undefined operation -- QUEUE" m))))
;     dispatch))

(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty-deque?) (null? front-ptr))
    (define (front-deque)
      (if (empty-deque?)
        (error "FRONT called with an empty deque")
        (car front-ptr)))
    (define (rear-deque)
      (if (empty-deque?)
        (error "REAR called with an empty deque")
        (car rear-ptr)))
    (define (front-insert-deque! item)
      (let ((new-pair (cons item (cons '() front-ptr))))
        (cond ((empty-deque?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair))
              (else
               (set-car! (cdr front-ptr) new-pair)
               (set-front-ptr! new-pair)
               item))))
    (define (rear-insert-deque! item)
      (let ((new-pair (cons item (cons rear-ptr '()))))
        (cond ((empty-deque?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair))
              (else
               (set-cdr! (cdr rear-ptr) new-pair)
               (set-rear-ptr! new-pair)
               item))))
    (define (front-delete-deque!)
      (cond ((empty-deque?)
             (error "FRONT-DELETE! called with an empty deque"))
            (else
             (set-front-ptr! (cddr front-ptr))
             (if (null? front-ptr)
                 (set-rear-ptr! '())
                 (set-car! (cdr front-ptr) '())))))
    (define (rear-delete-deque!)
      (cond ((empty-deque?)
             (error "REAR-DELETE! called with an empty deque"))
            (else
             (set-rear-ptr! (car (cdr rear-ptr)))
             (if (null? rear-ptr)
                 (set-front-ptr! '())
                 (set-cdr! (cdr rear-ptr) '())))))
    (define (dispatch m)
      (cond ((eq? m 'empty-deque?) empty-deque?)
            ((eq? m 'front-deque) front-deque)
            ((eq? m 'rear-deque) rear-deque)
            ((eq? m 'front-insert-deque!) front-insert-deque!)
            ((eq? m 'rear-insert-deque!) rear-insert-deque!)
            ((eq? m 'front-delete-deque!) front-delete-deque!)
            ((eq? m 'rear-delete-deque!) rear-delete-deque!)
            (else (error "Undefined operation -- DEQUE" m))))
    dispatch))
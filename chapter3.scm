(define new-withdraw
  (let ((balance 100))
    (lambda (amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
           "Insufficient funds"))))

(define (make-withdraw balance)
  (lambda (amount) 
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds")))

(define (call-the-cops)
  "CALL THE COPS")

(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define incorrect-password-count 0)
  (define (incorrect-password amount)
    (set! incorrect-password-count (+ incorrect-password-count 1))
    (if (>= incorrect-password-count 7) (call-the-cops)
        "Incorrect password"))
  (define (dispatch p m)
    (cond ;((eq? m 'auth) (eq? p password))
          ((not (eq? p password)) incorrect-password)
          ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT" m))))
  dispatch)

(define (make-accumulator total)
  (lambda (num)
    (set! total (+ total num))
    total))

(define (make-monitored func)
  (define calls 0)
  (define (monitored-func x)
    (cond ((eq? x 'how-many-calls?) calls)
          ((eq? x 'reset-count) (begin (set! calls 0)
                                       calls))
          (else (begin (set! calls (+ calls 1))
                       (func x)))))
  monitored-func)

(define (make-joint account old-passwd new-passwd)
  (define incorrect-password-count 0)
  (define (incorrect-password amount)
    (set! incorrect-password-count (+ incorrect-password-count 1))
    (if (>= incorrect-password-count 7) (call-the-cops)
        "Incorrect password"))
  (define (dispatch p m)
    (cond ((not (eq? p new-passwd)) incorrect-password)
          (else (account old-passwd m))))
  dispatch)

(define f
  (let ((one 0) (two 0))
    (lambda (x)
      (set! one two)
      (set! two x)
      one)))